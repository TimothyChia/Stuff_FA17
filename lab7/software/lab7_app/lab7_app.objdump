
lab7_app.elf:     file format elf32-littlenios2
lab7_app.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x10000020

Program Header:
    LOAD off    0x00001000 vaddr 0x10000000 paddr 0x10000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x10000020 paddr 0x10000020 align 2**12
         filesz 0x00000a00 memsz 0x00000a00 flags r-x
    LOAD off    0x00001a20 vaddr 0x10000a20 paddr 0x1000100c align 2**12
         filesz 0x000005ec memsz 0x000005ec flags rw-
    LOAD off    0x000025f8 vaddr 0x100015f8 paddr 0x100015f8 align 2**12
         filesz 0x00000000 memsz 0x00000010 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  10000000  10000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  10000020  10000020  0000200c  2**0
                  CONTENTS
  2 .text         000009f0  10000020  10000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000010  10000a10  10000a10  00001a10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000005ec  10000a20  1000100c  00001a20  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000010  100015f8  100015f8  000025f8  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00000000  00000000  0000200c  2**0
                  CONTENTS
  7 .sdram        00000000  10001608  10001608  0000200c  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  0000200c  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 000002d0  00000000  00000000  00002030  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00003bf9  00000000  00000000  00002300  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001245  00000000  00000000  00005ef9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000012ed  00000000  00000000  0000713e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00000498  00000000  00000000  0000842c  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00000f19  00000000  00000000  000088c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0000067b  00000000  00000000  000097dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000010  00000000  00000000  00009e58  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000038  00000000  00000000  00009e68  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0000b18f  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  0000b192  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0000b19e  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0000b19f  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  0000b1a0  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  0000b1a4  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  0000b1a8  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   00000004  00000000  00000000  0000b1ac  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    00000004  00000000  00000000  0000b1b0  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   00000004  00000000  00000000  0000b1b4  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 00000008  00000000  00000000  0000b1b8  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000038  00000000  00000000  0000b1c0  2**0
                  CONTENTS, READONLY
 30 .jdi          00003db5  00000000  00000000  0000b1f8  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     0005356c  00000000  00000000  0000efad  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
10000000 l    d  .entry	00000000 .entry
10000020 l    d  .exceptions	00000000 .exceptions
10000020 l    d  .text	00000000 .text
10000a10 l    d  .rodata	00000000 .rodata
10000a20 l    d  .rwdata	00000000 .rwdata
100015f8 l    d  .bss	00000000 .bss
00000000 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
10001608 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../lab7_app_bsp//obj/HAL/src/crt0.o
10000058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
1000011c l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 alt_load.c
10000248 l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 alt_close.c
100003dc l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
10000520 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
10000bc8 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_exit.c
1000032c g     F .text	0000005c alt_main
1000100c g       *ABS*	00000000 __flash_rwdata_start
100006a0 g     F .text	00000020 altera_nios2_gen2_irq_init
00000000  w      *UND*	00000000 __errno
10000000 g     F .entry	0000000c __reset
10000020 g       *ABS*	00000000 __flash_exceptions_start
10001604 g     O .bss	00000004 errno
100015fc g     O .bss	00000004 alt_argv
10008fec g       *ABS*	00000000 _gp
10000a48 g     O .rwdata	00000180 alt_fd_list
10000a10 g       *ABS*	00000000 __DTOR_END__
00000000  w      *UND*	00000000 malloc
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
10000238 g     F .text	00000008 .hidden __udivsi3
10000ffc g     O .rwdata	00000004 alt_max_fd
10001004 g     O .rwdata	00000004 _global_impure_ptr
10001608 g       *ABS*	00000000 __bss_end
10000a20 g     O .rwdata	00000028 alt_dev_null
10000504 g     F .text	0000001c alt_dcache_flush_all
1000100c g       *ABS*	00000000 __ram_rwdata_end
10000ff4 g     O .rwdata	00000008 alt_dev_list
10000a20 g       *ABS*	00000000 __ram_rodata_end
10000240 g     F .text	00000008 .hidden __umodsi3
10001608 g       *ABS*	00000000 end
10000a10 g       *ABS*	00000000 __CTOR_LIST__
18000000 g       *ABS*	00000000 __alt_stack_pointer
10000820 g     F .text	00000194 __call_exitprocs
10000020 g     F .text	0000003c _start
100003bc g     F .text	00000020 alt_sys_init
1000070c g     F .text	00000114 __register_exitproc
100009b4 g     F .text	00000028 .hidden __mulsi3
10000a20 g       *ABS*	00000000 __ram_rwdata_start
10000a10 g       *ABS*	00000000 __ram_rodata_start
10001608 g       *ABS*	00000000 __alt_stack_base
100015f8 g       *ABS*	00000000 __bss_start
1000005c g     F .text	000000c0 main
10001600 g     O .bss	00000004 alt_envp
10001000 g     O .rwdata	00000004 alt_errno
10000188 g     F .text	00000054 .hidden __divsi3
10000a10 g       *ABS*	00000000 __CTOR_END__
10000a10 g       *ABS*	00000000 __flash_rodata_start
10000a10 g       *ABS*	00000000 __DTOR_LIST__
10000388 g     F .text	00000034 alt_irq_init
10000620 g     F .text	00000080 alt_release_fd
100006c0 g     F .text	00000014 atexit
10001008 g     O .rwdata	00000004 _impure_ptr
100015f8 g     O .bss	00000004 alt_argc
100005a8 g     F .text	0000005c _do_dtors
10000fec g     O .rwdata	00000008 alt_fs_list
10000020 g       *ABS*	00000000 __ram_exceptions_start
1000100c g       *ABS*	00000000 _edata
10001608 g       *ABS*	00000000 _end
10000020 g       *ABS*	00000000 __ram_exceptions_end
100006d4 g     F .text	00000038 exit
100001dc g     F .text	0000005c .hidden __modsi3
18000000 g       *ABS*	00000000 __alt_data_end
10000000 g       *ABS*	00000000 __alt_mem_sdram
100009dc g     F .text	00000034 _exit
10000604 g     F .text	0000001c alt_icache_flush_all
1000054c g     F .text	0000005c _do_ctors
1000042c g     F .text	000000d8 close
100002ac g     F .text	00000080 alt_load
00000000  w      *UND*	00000000 free



Disassembly of section .entry:

10000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
10000000:	00440034 	movhi	at,4096
    ori r1, r1, %lo(_start)
10000004:	08400814 	ori	at,at,32
    jmp r1
10000008:	0800683a 	jmp	at
	...

Disassembly of section .text:

10000020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
10000020:	06c60034 	movhi	sp,6144
    ori sp, sp, %lo(__alt_stack_pointer)
10000024:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
10000028:	06840034 	movhi	gp,4096
    ori gp, gp, %lo(_gp)
1000002c:	d6a3fb14 	ori	gp,gp,36844
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
10000030:	00840034 	movhi	r2,4096
    ori r2, r2, %lo(__bss_start)
10000034:	10857e14 	ori	r2,r2,5624

    movhi r3, %hi(__bss_end)
10000038:	00c40034 	movhi	r3,4096
    ori r3, r3, %lo(__bss_end)
1000003c:	18c58214 	ori	r3,r3,5640

    beq r2, r3, 1f
10000040:	10c00326 	beq	r2,r3,10000050 <_start+0x30>

0:
    stw zero, (r2)
10000044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
10000048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
1000004c:	10fffd36 	bltu	r2,r3,10000044 <__alt_data_end+0xf8000044>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
10000050:	00002ac0 	call	100002ac <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
10000054:	000032c0 	call	1000032c <alt_main>

10000058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
10000058:	003fff06 	br	10000058 <__alt_data_end+0xf8000058>

1000005c <main>:
// Main.c - makes LEDG0 on DE2-115 board blink if NIOS II is set up correctly
// for ECE 385 - University of Illinois - Electrical and Computer Engineering
// Author: Zuofu Cheng

int main()
{
1000005c:	defff704 	addi	sp,sp,-36
10000060:	dfc00815 	stw	ra,32(sp)
10000064:	df000715 	stw	fp,28(sp)
10000068:	df000704 	addi	fp,sp,28
	int i = 0;
1000006c:	e03ffa15 	stw	zero,-24(fp)
	volatile unsigned int *button_PIO = (unsigned int*)0x20;// active high, inverted by the top level sv file.
10000070:	00800804 	movi	r2,32
10000074:	e0bffb15 	stw	r2,-20(fp)
	volatile unsigned int *sw_PIO = (unsigned int*)0x30; //For accumulator initialization (�Reset�)
10000078:	00800c04 	movi	r2,48
1000007c:	e0bffc15 	stw	r2,-16(fp)
	volatile unsigned int *LED_PIO = (unsigned int*)0x40; //make a pointer to access the PIO block
10000080:	00801004 	movi	r2,64
10000084:	e0bffd15 	stw	r2,-12(fp)
	
	*LED_PIO = 0; //clear all LEDs
10000088:	e0bffd17 	ldw	r2,-12(fp)
1000008c:	10000015 	stw	zero,0(r2)

	int accumulate = 8;
10000090:	00800204 	movi	r2,8
10000094:	e0bff915 	stw	r2,-28(fp)
	int a=0;
10000098:	e03ffe15 	stw	zero,-8(fp)
	int b=0;
1000009c:	e03fff15 	stw	zero,-4(fp)
		// *LED_PIO |= 0x1; //set LSB
		// for (i = 0; i < 100000; i++); //software delay
		// *LED_PIO &= ~0x1; //clear LSB


		if(*button_PIO == 0x8) //accumulate
100000a0:	e0bffb17 	ldw	r2,-20(fp)
100000a4:	10800017 	ldw	r2,0(r2)
100000a8:	10800218 	cmpnei	r2,r2,8
100000ac:	1000091e 	bne	r2,zero,100000d4 <main+0x78>
			{
			accumulate += *sw_PIO;
100000b0:	e0bffc17 	ldw	r2,-16(fp)
100000b4:	10c00017 	ldw	r3,0(r2)
100000b8:	e0bff917 	ldw	r2,-28(fp)
100000bc:	1885883a 	add	r2,r3,r2
100000c0:	e0bff915 	stw	r2,-28(fp)
			while(*button_PIO != 0);
100000c4:	0001883a 	nop
100000c8:	e0bffb17 	ldw	r2,-20(fp)
100000cc:	10800017 	ldw	r2,0(r2)
100000d0:	103ffd1e 	bne	r2,zero,100000c8 <__alt_data_end+0xf80000c8>
			}
		if(*button_PIO == 0x4) //accumulator reset
100000d4:	e0bffb17 	ldw	r2,-20(fp)
100000d8:	10800017 	ldw	r2,0(r2)
100000dc:	10800118 	cmpnei	r2,r2,4
100000e0:	1000011e 	bne	r2,zero,100000e8 <main+0x8c>
			accumulate = 0;
100000e4:	e03ff915 	stw	zero,-28(fp)
		if(accumulate>255)
100000e8:	e0bff917 	ldw	r2,-28(fp)
100000ec:	10804010 	cmplti	r2,r2,256
100000f0:	1000061e 	bne	r2,zero,1000010c <main+0xb0>
			accumulate=(accumulate%255)-1;
100000f4:	e0bff917 	ldw	r2,-28(fp)
100000f8:	1009883a 	mov	r4,r2
100000fc:	01403fc4 	movi	r5,255
10000100:	00001dc0 	call	100001dc <__modsi3>
10000104:	10bfffc4 	addi	r2,r2,-1
10000108:	e0bff915 	stw	r2,-28(fp)

		*LED_PIO = accumulate;
1000010c:	e0fff917 	ldw	r3,-28(fp)
10000110:	e0bffd17 	ldw	r2,-12(fp)
10000114:	10c00015 	stw	r3,0(r2)
		//while(*button_PIO != 0);
	}   
10000118:	003fe106 	br	100000a0 <__alt_data_end+0xf80000a0>

1000011c <udivmodsi4>:
1000011c:	2900182e 	bgeu	r5,r4,10000180 <udivmodsi4+0x64>
10000120:	28001716 	blt	r5,zero,10000180 <udivmodsi4+0x64>
10000124:	00800804 	movi	r2,32
10000128:	00c00044 	movi	r3,1
1000012c:	00000206 	br	10000138 <udivmodsi4+0x1c>
10000130:	10001126 	beq	r2,zero,10000178 <udivmodsi4+0x5c>
10000134:	28000516 	blt	r5,zero,1000014c <udivmodsi4+0x30>
10000138:	294b883a 	add	r5,r5,r5
1000013c:	10bfffc4 	addi	r2,r2,-1
10000140:	18c7883a 	add	r3,r3,r3
10000144:	293ffa36 	bltu	r5,r4,10000130 <__alt_data_end+0xf8000130>
10000148:	18000b26 	beq	r3,zero,10000178 <udivmodsi4+0x5c>
1000014c:	0005883a 	mov	r2,zero
10000150:	21400236 	bltu	r4,r5,1000015c <udivmodsi4+0x40>
10000154:	2149c83a 	sub	r4,r4,r5
10000158:	10c4b03a 	or	r2,r2,r3
1000015c:	1806d07a 	srli	r3,r3,1
10000160:	280ad07a 	srli	r5,r5,1
10000164:	183ffa1e 	bne	r3,zero,10000150 <__alt_data_end+0xf8000150>
10000168:	3000011e 	bne	r6,zero,10000170 <udivmodsi4+0x54>
1000016c:	f800283a 	ret
10000170:	2005883a 	mov	r2,r4
10000174:	f800283a 	ret
10000178:	0005883a 	mov	r2,zero
1000017c:	003ffa06 	br	10000168 <__alt_data_end+0xf8000168>
10000180:	00c00044 	movi	r3,1
10000184:	003ff106 	br	1000014c <__alt_data_end+0xf800014c>

10000188 <__divsi3>:
10000188:	defffe04 	addi	sp,sp,-8
1000018c:	dfc00115 	stw	ra,4(sp)
10000190:	dc000015 	stw	r16,0(sp)
10000194:	20000b16 	blt	r4,zero,100001c4 <__divsi3+0x3c>
10000198:	0021883a 	mov	r16,zero
1000019c:	28000c16 	blt	r5,zero,100001d0 <__divsi3+0x48>
100001a0:	000d883a 	mov	r6,zero
100001a4:	000011c0 	call	1000011c <udivmodsi4>
100001a8:	0407c83a 	sub	r3,zero,r16
100001ac:	1884f03a 	xor	r2,r3,r2
100001b0:	1405883a 	add	r2,r2,r16
100001b4:	dfc00117 	ldw	ra,4(sp)
100001b8:	dc000017 	ldw	r16,0(sp)
100001bc:	dec00204 	addi	sp,sp,8
100001c0:	f800283a 	ret
100001c4:	0109c83a 	sub	r4,zero,r4
100001c8:	04000044 	movi	r16,1
100001cc:	283ff40e 	bge	r5,zero,100001a0 <__alt_data_end+0xf80001a0>
100001d0:	014bc83a 	sub	r5,zero,r5
100001d4:	8400005c 	xori	r16,r16,1
100001d8:	003ff106 	br	100001a0 <__alt_data_end+0xf80001a0>

100001dc <__modsi3>:
100001dc:	defffd04 	addi	sp,sp,-12
100001e0:	dfc00215 	stw	ra,8(sp)
100001e4:	dc400115 	stw	r17,4(sp)
100001e8:	dc000015 	stw	r16,0(sp)
100001ec:	20000c16 	blt	r4,zero,10000220 <__modsi3+0x44>
100001f0:	0023883a 	mov	r17,zero
100001f4:	0021883a 	mov	r16,zero
100001f8:	28000d16 	blt	r5,zero,10000230 <__modsi3+0x54>
100001fc:	01800044 	movi	r6,1
10000200:	000011c0 	call	1000011c <udivmodsi4>
10000204:	1404f03a 	xor	r2,r2,r16
10000208:	8885883a 	add	r2,r17,r2
1000020c:	dfc00217 	ldw	ra,8(sp)
10000210:	dc400117 	ldw	r17,4(sp)
10000214:	dc000017 	ldw	r16,0(sp)
10000218:	dec00304 	addi	sp,sp,12
1000021c:	f800283a 	ret
10000220:	0109c83a 	sub	r4,zero,r4
10000224:	04400044 	movi	r17,1
10000228:	043fffc4 	movi	r16,-1
1000022c:	283ff30e 	bge	r5,zero,100001fc <__alt_data_end+0xf80001fc>
10000230:	014bc83a 	sub	r5,zero,r5
10000234:	003ff106 	br	100001fc <__alt_data_end+0xf80001fc>

10000238 <__udivsi3>:
10000238:	000d883a 	mov	r6,zero
1000023c:	000011c1 	jmpi	1000011c <udivmodsi4>

10000240 <__umodsi3>:
10000240:	01800044 	movi	r6,1
10000244:	000011c1 	jmpi	1000011c <udivmodsi4>

10000248 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
10000248:	defffc04 	addi	sp,sp,-16
1000024c:	df000315 	stw	fp,12(sp)
10000250:	df000304 	addi	fp,sp,12
10000254:	e13ffd15 	stw	r4,-12(fp)
10000258:	e17ffe15 	stw	r5,-8(fp)
1000025c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
10000260:	e0fffe17 	ldw	r3,-8(fp)
10000264:	e0bffd17 	ldw	r2,-12(fp)
10000268:	18800c26 	beq	r3,r2,1000029c <alt_load_section+0x54>
  {
    while( to != end )
1000026c:	00000806 	br	10000290 <alt_load_section+0x48>
    {
      *to++ = *from++;
10000270:	e0bffe17 	ldw	r2,-8(fp)
10000274:	10c00104 	addi	r3,r2,4
10000278:	e0fffe15 	stw	r3,-8(fp)
1000027c:	e0fffd17 	ldw	r3,-12(fp)
10000280:	19000104 	addi	r4,r3,4
10000284:	e13ffd15 	stw	r4,-12(fp)
10000288:	18c00017 	ldw	r3,0(r3)
1000028c:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
10000290:	e0fffe17 	ldw	r3,-8(fp)
10000294:	e0bfff17 	ldw	r2,-4(fp)
10000298:	18bff51e 	bne	r3,r2,10000270 <__alt_data_end+0xf8000270>
    {
      *to++ = *from++;
    }
  }
}
1000029c:	e037883a 	mov	sp,fp
100002a0:	df000017 	ldw	fp,0(sp)
100002a4:	dec00104 	addi	sp,sp,4
100002a8:	f800283a 	ret

100002ac <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
100002ac:	defffe04 	addi	sp,sp,-8
100002b0:	dfc00115 	stw	ra,4(sp)
100002b4:	df000015 	stw	fp,0(sp)
100002b8:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
100002bc:	01040034 	movhi	r4,4096
100002c0:	21040304 	addi	r4,r4,4108
100002c4:	01440034 	movhi	r5,4096
100002c8:	29428804 	addi	r5,r5,2592
100002cc:	01840034 	movhi	r6,4096
100002d0:	31840304 	addi	r6,r6,4108
100002d4:	00002480 	call	10000248 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
100002d8:	01040034 	movhi	r4,4096
100002dc:	21000804 	addi	r4,r4,32
100002e0:	01440034 	movhi	r5,4096
100002e4:	29400804 	addi	r5,r5,32
100002e8:	01840034 	movhi	r6,4096
100002ec:	31800804 	addi	r6,r6,32
100002f0:	00002480 	call	10000248 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
100002f4:	01040034 	movhi	r4,4096
100002f8:	21028404 	addi	r4,r4,2576
100002fc:	01440034 	movhi	r5,4096
10000300:	29428404 	addi	r5,r5,2576
10000304:	01840034 	movhi	r6,4096
10000308:	31828804 	addi	r6,r6,2592
1000030c:	00002480 	call	10000248 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
10000310:	00005040 	call	10000504 <alt_dcache_flush_all>
  alt_icache_flush_all();
10000314:	00006040 	call	10000604 <alt_icache_flush_all>
}
10000318:	e037883a 	mov	sp,fp
1000031c:	dfc00117 	ldw	ra,4(sp)
10000320:	df000017 	ldw	fp,0(sp)
10000324:	dec00204 	addi	sp,sp,8
10000328:	f800283a 	ret

1000032c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
1000032c:	defffd04 	addi	sp,sp,-12
10000330:	dfc00215 	stw	ra,8(sp)
10000334:	df000115 	stw	fp,4(sp)
10000338:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
1000033c:	0009883a 	mov	r4,zero
10000340:	00003880 	call	10000388 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
10000344:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
10000348:	00003bc0 	call	100003bc <alt_sys_init>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
1000034c:	000054c0 	call	1000054c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
10000350:	01040034 	movhi	r4,4096
10000354:	21016a04 	addi	r4,r4,1448
10000358:	00006c00 	call	100006c0 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
1000035c:	d1218317 	ldw	r4,-31220(gp)
10000360:	d0e18417 	ldw	r3,-31216(gp)
10000364:	d0a18517 	ldw	r2,-31212(gp)
10000368:	180b883a 	mov	r5,r3
1000036c:	100d883a 	mov	r6,r2
10000370:	000005c0 	call	1000005c <main>
10000374:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
10000378:	01000044 	movi	r4,1
1000037c:	000042c0 	call	1000042c <close>
  exit (result);
10000380:	e13fff17 	ldw	r4,-4(fp)
10000384:	00006d40 	call	100006d4 <exit>

10000388 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
10000388:	defffd04 	addi	sp,sp,-12
1000038c:	dfc00215 	stw	ra,8(sp)
10000390:	df000115 	stw	fp,4(sp)
10000394:	df000104 	addi	fp,sp,4
10000398:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
1000039c:	00006a00 	call	100006a0 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
100003a0:	00800044 	movi	r2,1
100003a4:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
100003a8:	e037883a 	mov	sp,fp
100003ac:	dfc00117 	ldw	ra,4(sp)
100003b0:	df000017 	ldw	fp,0(sp)
100003b4:	dec00204 	addi	sp,sp,8
100003b8:	f800283a 	ret

100003bc <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
100003bc:	deffff04 	addi	sp,sp,-4
100003c0:	df000015 	stw	fp,0(sp)
100003c4:	d839883a 	mov	fp,sp
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
100003c8:	0001883a 	nop
}
100003cc:	e037883a 	mov	sp,fp
100003d0:	df000017 	ldw	fp,0(sp)
100003d4:	dec00104 	addi	sp,sp,4
100003d8:	f800283a 	ret

100003dc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
100003dc:	defffe04 	addi	sp,sp,-8
100003e0:	dfc00115 	stw	ra,4(sp)
100003e4:	df000015 	stw	fp,0(sp)
100003e8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
100003ec:	00840034 	movhi	r2,4096
100003f0:	10840004 	addi	r2,r2,4096
100003f4:	10800017 	ldw	r2,0(r2)
100003f8:	10000526 	beq	r2,zero,10000410 <alt_get_errno+0x34>
100003fc:	00840034 	movhi	r2,4096
10000400:	10840004 	addi	r2,r2,4096
10000404:	10800017 	ldw	r2,0(r2)
10000408:	103ee83a 	callr	r2
1000040c:	00000206 	br	10000418 <alt_get_errno+0x3c>
10000410:	00840034 	movhi	r2,4096
10000414:	10858104 	addi	r2,r2,5636
}
10000418:	e037883a 	mov	sp,fp
1000041c:	dfc00117 	ldw	ra,4(sp)
10000420:	df000017 	ldw	fp,0(sp)
10000424:	dec00204 	addi	sp,sp,8
10000428:	f800283a 	ret

1000042c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
1000042c:	defffb04 	addi	sp,sp,-20
10000430:	dfc00415 	stw	ra,16(sp)
10000434:	df000315 	stw	fp,12(sp)
10000438:	df000304 	addi	fp,sp,12
1000043c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
10000440:	e0bfff17 	ldw	r2,-4(fp)
10000444:	10000816 	blt	r2,zero,10000468 <close+0x3c>
10000448:	e13fff17 	ldw	r4,-4(fp)
1000044c:	01400304 	movi	r5,12
10000450:	00009b40 	call	100009b4 <__mulsi3>
10000454:	1007883a 	mov	r3,r2
10000458:	00840034 	movhi	r2,4096
1000045c:	10829204 	addi	r2,r2,2632
10000460:	1885883a 	add	r2,r3,r2
10000464:	00000106 	br	1000046c <close+0x40>
10000468:	0005883a 	mov	r2,zero
1000046c:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
10000470:	e0bffd17 	ldw	r2,-12(fp)
10000474:	10001926 	beq	r2,zero,100004dc <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
10000478:	e0bffd17 	ldw	r2,-12(fp)
1000047c:	10800017 	ldw	r2,0(r2)
10000480:	10800417 	ldw	r2,16(r2)
10000484:	10000626 	beq	r2,zero,100004a0 <close+0x74>
10000488:	e0bffd17 	ldw	r2,-12(fp)
1000048c:	10800017 	ldw	r2,0(r2)
10000490:	10800417 	ldw	r2,16(r2)
10000494:	e13ffd17 	ldw	r4,-12(fp)
10000498:	103ee83a 	callr	r2
1000049c:	00000106 	br	100004a4 <close+0x78>
100004a0:	0005883a 	mov	r2,zero
100004a4:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
100004a8:	e13fff17 	ldw	r4,-4(fp)
100004ac:	00006200 	call	10000620 <alt_release_fd>
    if (rval < 0)
100004b0:	e0bffe17 	ldw	r2,-8(fp)
100004b4:	1000070e 	bge	r2,zero,100004d4 <close+0xa8>
    {
      ALT_ERRNO = -rval;
100004b8:	00003dc0 	call	100003dc <alt_get_errno>
100004bc:	1007883a 	mov	r3,r2
100004c0:	e0bffe17 	ldw	r2,-8(fp)
100004c4:	0085c83a 	sub	r2,zero,r2
100004c8:	18800015 	stw	r2,0(r3)
      return -1;
100004cc:	00bfffc4 	movi	r2,-1
100004d0:	00000706 	br	100004f0 <close+0xc4>
    }
    return 0;
100004d4:	0005883a 	mov	r2,zero
100004d8:	00000506 	br	100004f0 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
100004dc:	00003dc0 	call	100003dc <alt_get_errno>
100004e0:	1007883a 	mov	r3,r2
100004e4:	00801444 	movi	r2,81
100004e8:	18800015 	stw	r2,0(r3)
    return -1;
100004ec:	00bfffc4 	movi	r2,-1
  }
}
100004f0:	e037883a 	mov	sp,fp
100004f4:	dfc00117 	ldw	ra,4(sp)
100004f8:	df000017 	ldw	fp,0(sp)
100004fc:	dec00204 	addi	sp,sp,8
10000500:	f800283a 	ret

10000504 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
10000504:	deffff04 	addi	sp,sp,-4
10000508:	df000015 	stw	fp,0(sp)
1000050c:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
10000510:	e037883a 	mov	sp,fp
10000514:	df000017 	ldw	fp,0(sp)
10000518:	dec00104 	addi	sp,sp,4
1000051c:	f800283a 	ret

10000520 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
10000520:	defffc04 	addi	sp,sp,-16
10000524:	df000315 	stw	fp,12(sp)
10000528:	df000304 	addi	fp,sp,12
1000052c:	e13ffd15 	stw	r4,-12(fp)
10000530:	e17ffe15 	stw	r5,-8(fp)
10000534:	e1bfff15 	stw	r6,-4(fp)
  return len;
10000538:	e0bfff17 	ldw	r2,-4(fp)
}
1000053c:	e037883a 	mov	sp,fp
10000540:	df000017 	ldw	fp,0(sp)
10000544:	dec00104 	addi	sp,sp,4
10000548:	f800283a 	ret

1000054c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
1000054c:	defffd04 	addi	sp,sp,-12
10000550:	dfc00215 	stw	ra,8(sp)
10000554:	df000115 	stw	fp,4(sp)
10000558:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
1000055c:	00840034 	movhi	r2,4096
10000560:	10828304 	addi	r2,r2,2572
10000564:	e0bfff15 	stw	r2,-4(fp)
10000568:	00000606 	br	10000584 <_do_ctors+0x38>
        (*ctor) (); 
1000056c:	e0bfff17 	ldw	r2,-4(fp)
10000570:	10800017 	ldw	r2,0(r2)
10000574:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
10000578:	e0bfff17 	ldw	r2,-4(fp)
1000057c:	10bfff04 	addi	r2,r2,-4
10000580:	e0bfff15 	stw	r2,-4(fp)
10000584:	e0ffff17 	ldw	r3,-4(fp)
10000588:	00840034 	movhi	r2,4096
1000058c:	10828404 	addi	r2,r2,2576
10000590:	18bff62e 	bgeu	r3,r2,1000056c <__alt_data_end+0xf800056c>
        (*ctor) (); 
}
10000594:	e037883a 	mov	sp,fp
10000598:	dfc00117 	ldw	ra,4(sp)
1000059c:	df000017 	ldw	fp,0(sp)
100005a0:	dec00204 	addi	sp,sp,8
100005a4:	f800283a 	ret

100005a8 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
100005a8:	defffd04 	addi	sp,sp,-12
100005ac:	dfc00215 	stw	ra,8(sp)
100005b0:	df000115 	stw	fp,4(sp)
100005b4:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
100005b8:	00840034 	movhi	r2,4096
100005bc:	10828304 	addi	r2,r2,2572
100005c0:	e0bfff15 	stw	r2,-4(fp)
100005c4:	00000606 	br	100005e0 <_do_dtors+0x38>
        (*dtor) (); 
100005c8:	e0bfff17 	ldw	r2,-4(fp)
100005cc:	10800017 	ldw	r2,0(r2)
100005d0:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
100005d4:	e0bfff17 	ldw	r2,-4(fp)
100005d8:	10bfff04 	addi	r2,r2,-4
100005dc:	e0bfff15 	stw	r2,-4(fp)
100005e0:	e0ffff17 	ldw	r3,-4(fp)
100005e4:	00840034 	movhi	r2,4096
100005e8:	10828404 	addi	r2,r2,2576
100005ec:	18bff62e 	bgeu	r3,r2,100005c8 <__alt_data_end+0xf80005c8>
        (*dtor) (); 
}
100005f0:	e037883a 	mov	sp,fp
100005f4:	dfc00117 	ldw	ra,4(sp)
100005f8:	df000017 	ldw	fp,0(sp)
100005fc:	dec00204 	addi	sp,sp,8
10000600:	f800283a 	ret

10000604 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
10000604:	deffff04 	addi	sp,sp,-4
10000608:	df000015 	stw	fp,0(sp)
1000060c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
10000610:	e037883a 	mov	sp,fp
10000614:	df000017 	ldw	fp,0(sp)
10000618:	dec00104 	addi	sp,sp,4
1000061c:	f800283a 	ret

10000620 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
10000620:	defffc04 	addi	sp,sp,-16
10000624:	dfc00315 	stw	ra,12(sp)
10000628:	df000215 	stw	fp,8(sp)
1000062c:	dc000115 	stw	r16,4(sp)
10000630:	df000204 	addi	fp,sp,8
10000634:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
10000638:	e0bffe17 	ldw	r2,-8(fp)
1000063c:	108000d0 	cmplti	r2,r2,3
10000640:	1000111e 	bne	r2,zero,10000688 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
10000644:	04040034 	movhi	r16,4096
10000648:	84029204 	addi	r16,r16,2632
1000064c:	e0bffe17 	ldw	r2,-8(fp)
10000650:	1009883a 	mov	r4,r2
10000654:	01400304 	movi	r5,12
10000658:	00009b40 	call	100009b4 <__mulsi3>
1000065c:	8085883a 	add	r2,r16,r2
10000660:	10800204 	addi	r2,r2,8
10000664:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
10000668:	04040034 	movhi	r16,4096
1000066c:	84029204 	addi	r16,r16,2632
10000670:	e0bffe17 	ldw	r2,-8(fp)
10000674:	1009883a 	mov	r4,r2
10000678:	01400304 	movi	r5,12
1000067c:	00009b40 	call	100009b4 <__mulsi3>
10000680:	8085883a 	add	r2,r16,r2
10000684:	10000015 	stw	zero,0(r2)
  }
}
10000688:	e6ffff04 	addi	sp,fp,-4
1000068c:	dfc00217 	ldw	ra,8(sp)
10000690:	df000117 	ldw	fp,4(sp)
10000694:	dc000017 	ldw	r16,0(sp)
10000698:	dec00304 	addi	sp,sp,12
1000069c:	f800283a 	ret

100006a0 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
100006a0:	deffff04 	addi	sp,sp,-4
100006a4:	df000015 	stw	fp,0(sp)
100006a8:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
100006ac:	000170fa 	wrctl	ienable,zero
}
100006b0:	e037883a 	mov	sp,fp
100006b4:	df000017 	ldw	fp,0(sp)
100006b8:	dec00104 	addi	sp,sp,4
100006bc:	f800283a 	ret

100006c0 <atexit>:
100006c0:	200b883a 	mov	r5,r4
100006c4:	000d883a 	mov	r6,zero
100006c8:	0009883a 	mov	r4,zero
100006cc:	000f883a 	mov	r7,zero
100006d0:	000070c1 	jmpi	1000070c <__register_exitproc>

100006d4 <exit>:
100006d4:	defffe04 	addi	sp,sp,-8
100006d8:	000b883a 	mov	r5,zero
100006dc:	dc000015 	stw	r16,0(sp)
100006e0:	dfc00115 	stw	ra,4(sp)
100006e4:	2021883a 	mov	r16,r4
100006e8:	00008200 	call	10000820 <__call_exitprocs>
100006ec:	00840034 	movhi	r2,4096
100006f0:	10840104 	addi	r2,r2,4100
100006f4:	11000017 	ldw	r4,0(r2)
100006f8:	20800f17 	ldw	r2,60(r4)
100006fc:	10000126 	beq	r2,zero,10000704 <exit+0x30>
10000700:	103ee83a 	callr	r2
10000704:	8009883a 	mov	r4,r16
10000708:	00009dc0 	call	100009dc <_exit>

1000070c <__register_exitproc>:
1000070c:	00840034 	movhi	r2,4096
10000710:	defffa04 	addi	sp,sp,-24
10000714:	10840104 	addi	r2,r2,4100
10000718:	dc000315 	stw	r16,12(sp)
1000071c:	14000017 	ldw	r16,0(r2)
10000720:	dc400415 	stw	r17,16(sp)
10000724:	dfc00515 	stw	ra,20(sp)
10000728:	80805217 	ldw	r2,328(r16)
1000072c:	2023883a 	mov	r17,r4
10000730:	10003626 	beq	r2,zero,1000080c <__register_exitproc+0x100>
10000734:	10c00117 	ldw	r3,4(r2)
10000738:	010007c4 	movi	r4,31
1000073c:	20c00e16 	blt	r4,r3,10000778 <__register_exitproc+0x6c>
10000740:	1a400044 	addi	r9,r3,1
10000744:	8800211e 	bne	r17,zero,100007cc <__register_exitproc+0xc0>
10000748:	18c00084 	addi	r3,r3,2
1000074c:	18c7883a 	add	r3,r3,r3
10000750:	18c7883a 	add	r3,r3,r3
10000754:	12400115 	stw	r9,4(r2)
10000758:	10c7883a 	add	r3,r2,r3
1000075c:	19400015 	stw	r5,0(r3)
10000760:	0005883a 	mov	r2,zero
10000764:	dfc00517 	ldw	ra,20(sp)
10000768:	dc400417 	ldw	r17,16(sp)
1000076c:	dc000317 	ldw	r16,12(sp)
10000770:	dec00604 	addi	sp,sp,24
10000774:	f800283a 	ret
10000778:	00800034 	movhi	r2,0
1000077c:	10800004 	addi	r2,r2,0
10000780:	10002526 	beq	r2,zero,10000818 <__register_exitproc+0x10c>
10000784:	01006404 	movi	r4,400
10000788:	d9400015 	stw	r5,0(sp)
1000078c:	d9800115 	stw	r6,4(sp)
10000790:	d9c00215 	stw	r7,8(sp)
10000794:	00000000 	call	10000000 <__alt_mem_sdram>
10000798:	d9400017 	ldw	r5,0(sp)
1000079c:	d9800117 	ldw	r6,4(sp)
100007a0:	d9c00217 	ldw	r7,8(sp)
100007a4:	10001c26 	beq	r2,zero,10000818 <__register_exitproc+0x10c>
100007a8:	80c05217 	ldw	r3,328(r16)
100007ac:	10000115 	stw	zero,4(r2)
100007b0:	02400044 	movi	r9,1
100007b4:	10c00015 	stw	r3,0(r2)
100007b8:	80805215 	stw	r2,328(r16)
100007bc:	10006215 	stw	zero,392(r2)
100007c0:	10006315 	stw	zero,396(r2)
100007c4:	0007883a 	mov	r3,zero
100007c8:	883fdf26 	beq	r17,zero,10000748 <__alt_data_end+0xf8000748>
100007cc:	18d1883a 	add	r8,r3,r3
100007d0:	4211883a 	add	r8,r8,r8
100007d4:	1211883a 	add	r8,r2,r8
100007d8:	41802215 	stw	r6,136(r8)
100007dc:	01000044 	movi	r4,1
100007e0:	11806217 	ldw	r6,392(r2)
100007e4:	20c8983a 	sll	r4,r4,r3
100007e8:	310cb03a 	or	r6,r6,r4
100007ec:	11806215 	stw	r6,392(r2)
100007f0:	41c04215 	stw	r7,264(r8)
100007f4:	01800084 	movi	r6,2
100007f8:	89bfd31e 	bne	r17,r6,10000748 <__alt_data_end+0xf8000748>
100007fc:	11806317 	ldw	r6,396(r2)
10000800:	3108b03a 	or	r4,r6,r4
10000804:	11006315 	stw	r4,396(r2)
10000808:	003fcf06 	br	10000748 <__alt_data_end+0xf8000748>
1000080c:	80805304 	addi	r2,r16,332
10000810:	80805215 	stw	r2,328(r16)
10000814:	003fc706 	br	10000734 <__alt_data_end+0xf8000734>
10000818:	00bfffc4 	movi	r2,-1
1000081c:	003fd106 	br	10000764 <__alt_data_end+0xf8000764>

10000820 <__call_exitprocs>:
10000820:	00840034 	movhi	r2,4096
10000824:	10840104 	addi	r2,r2,4100
10000828:	10800017 	ldw	r2,0(r2)
1000082c:	defff404 	addi	sp,sp,-48
10000830:	dd800815 	stw	r22,32(sp)
10000834:	d8800015 	stw	r2,0(sp)
10000838:	10805204 	addi	r2,r2,328
1000083c:	dd000615 	stw	r20,24(sp)
10000840:	dc800415 	stw	r18,16(sp)
10000844:	dfc00b15 	stw	ra,44(sp)
10000848:	df000a15 	stw	fp,40(sp)
1000084c:	ddc00915 	stw	r23,36(sp)
10000850:	dd400715 	stw	r21,28(sp)
10000854:	dcc00515 	stw	r19,20(sp)
10000858:	dc400315 	stw	r17,12(sp)
1000085c:	dc000215 	stw	r16,8(sp)
10000860:	2025883a 	mov	r18,r4
10000864:	2829883a 	mov	r20,r5
10000868:	d8800115 	stw	r2,4(sp)
1000086c:	05bfffc4 	movi	r22,-1
10000870:	d8800017 	ldw	r2,0(sp)
10000874:	14c05217 	ldw	r19,328(r2)
10000878:	98001d26 	beq	r19,zero,100008f0 <__call_exitprocs+0xd0>
1000087c:	dd400117 	ldw	r21,4(sp)
10000880:	98800117 	ldw	r2,4(r19)
10000884:	173fffc4 	addi	fp,r2,-1
10000888:	e0000d16 	blt	fp,zero,100008c0 <__call_exitprocs+0xa0>
1000088c:	14000044 	addi	r16,r2,1
10000890:	8421883a 	add	r16,r16,r16
10000894:	8421883a 	add	r16,r16,r16
10000898:	84402004 	addi	r17,r16,128
1000089c:	9c63883a 	add	r17,r19,r17
100008a0:	9c21883a 	add	r16,r19,r16
100008a4:	a0001e26 	beq	r20,zero,10000920 <__call_exitprocs+0x100>
100008a8:	80804017 	ldw	r2,256(r16)
100008ac:	15001c26 	beq	r2,r20,10000920 <__call_exitprocs+0x100>
100008b0:	e73fffc4 	addi	fp,fp,-1
100008b4:	843fff04 	addi	r16,r16,-4
100008b8:	8c7fff04 	addi	r17,r17,-4
100008bc:	e5bff91e 	bne	fp,r22,100008a4 <__alt_data_end+0xf80008a4>
100008c0:	00800034 	movhi	r2,0
100008c4:	10800004 	addi	r2,r2,0
100008c8:	10000926 	beq	r2,zero,100008f0 <__call_exitprocs+0xd0>
100008cc:	98800117 	ldw	r2,4(r19)
100008d0:	1000311e 	bne	r2,zero,10000998 <__call_exitprocs+0x178>
100008d4:	98800017 	ldw	r2,0(r19)
100008d8:	10003426 	beq	r2,zero,100009ac <__call_exitprocs+0x18c>
100008dc:	9809883a 	mov	r4,r19
100008e0:	a8800015 	stw	r2,0(r21)
100008e4:	00000000 	call	10000000 <__alt_mem_sdram>
100008e8:	acc00017 	ldw	r19,0(r21)
100008ec:	983fe41e 	bne	r19,zero,10000880 <__alt_data_end+0xf8000880>
100008f0:	dfc00b17 	ldw	ra,44(sp)
100008f4:	df000a17 	ldw	fp,40(sp)
100008f8:	ddc00917 	ldw	r23,36(sp)
100008fc:	dd800817 	ldw	r22,32(sp)
10000900:	dd400717 	ldw	r21,28(sp)
10000904:	dd000617 	ldw	r20,24(sp)
10000908:	dcc00517 	ldw	r19,20(sp)
1000090c:	dc800417 	ldw	r18,16(sp)
10000910:	dc400317 	ldw	r17,12(sp)
10000914:	dc000217 	ldw	r16,8(sp)
10000918:	dec00c04 	addi	sp,sp,48
1000091c:	f800283a 	ret
10000920:	98800117 	ldw	r2,4(r19)
10000924:	80c00017 	ldw	r3,0(r16)
10000928:	10bfffc4 	addi	r2,r2,-1
1000092c:	17001526 	beq	r2,fp,10000984 <__call_exitprocs+0x164>
10000930:	80000015 	stw	zero,0(r16)
10000934:	183fde26 	beq	r3,zero,100008b0 <__alt_data_end+0xf80008b0>
10000938:	00800044 	movi	r2,1
1000093c:	1708983a 	sll	r4,r2,fp
10000940:	98806217 	ldw	r2,392(r19)
10000944:	9dc00117 	ldw	r23,4(r19)
10000948:	2084703a 	and	r2,r4,r2
1000094c:	1000061e 	bne	r2,zero,10000968 <__call_exitprocs+0x148>
10000950:	183ee83a 	callr	r3
10000954:	98800117 	ldw	r2,4(r19)
10000958:	15ffc51e 	bne	r2,r23,10000870 <__alt_data_end+0xf8000870>
1000095c:	a8800017 	ldw	r2,0(r21)
10000960:	14ffd326 	beq	r2,r19,100008b0 <__alt_data_end+0xf80008b0>
10000964:	003fc206 	br	10000870 <__alt_data_end+0xf8000870>
10000968:	98806317 	ldw	r2,396(r19)
1000096c:	2084703a 	and	r2,r4,r2
10000970:	1000061e 	bne	r2,zero,1000098c <__call_exitprocs+0x16c>
10000974:	89400017 	ldw	r5,0(r17)
10000978:	9009883a 	mov	r4,r18
1000097c:	183ee83a 	callr	r3
10000980:	003ff406 	br	10000954 <__alt_data_end+0xf8000954>
10000984:	9f000115 	stw	fp,4(r19)
10000988:	003fea06 	br	10000934 <__alt_data_end+0xf8000934>
1000098c:	89000017 	ldw	r4,0(r17)
10000990:	183ee83a 	callr	r3
10000994:	003fef06 	br	10000954 <__alt_data_end+0xf8000954>
10000998:	98800017 	ldw	r2,0(r19)
1000099c:	982b883a 	mov	r21,r19
100009a0:	1027883a 	mov	r19,r2
100009a4:	983fb61e 	bne	r19,zero,10000880 <__alt_data_end+0xf8000880>
100009a8:	003fd106 	br	100008f0 <__alt_data_end+0xf80008f0>
100009ac:	0005883a 	mov	r2,zero
100009b0:	003ffa06 	br	1000099c <__alt_data_end+0xf800099c>

100009b4 <__mulsi3>:
100009b4:	0005883a 	mov	r2,zero
100009b8:	20000726 	beq	r4,zero,100009d8 <__mulsi3+0x24>
100009bc:	20c0004c 	andi	r3,r4,1
100009c0:	2008d07a 	srli	r4,r4,1
100009c4:	18000126 	beq	r3,zero,100009cc <__mulsi3+0x18>
100009c8:	1145883a 	add	r2,r2,r5
100009cc:	294b883a 	add	r5,r5,r5
100009d0:	203ffa1e 	bne	r4,zero,100009bc <__alt_data_end+0xf80009bc>
100009d4:	f800283a 	ret
100009d8:	f800283a 	ret

100009dc <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
100009dc:	defffd04 	addi	sp,sp,-12
100009e0:	df000215 	stw	fp,8(sp)
100009e4:	df000204 	addi	fp,sp,8
100009e8:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
100009ec:	0001883a 	nop
100009f0:	e0bfff17 	ldw	r2,-4(fp)
100009f4:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
100009f8:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
100009fc:	10000226 	beq	r2,zero,10000a08 <_exit+0x2c>
    ALT_SIM_FAIL();
10000a00:	002af070 	cmpltui	zero,zero,43969
10000a04:	00000106 	br	10000a0c <_exit+0x30>
  } else {
    ALT_SIM_PASS();
10000a08:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
10000a0c:	003fff06 	br	10000a0c <__alt_data_end+0xf8000a0c>
